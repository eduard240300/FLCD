program = "start" decllist stmtlist "stop"
decllist = declaration | declaration decllist
declaration = "let" idtype identifier [ "=" ( integer | constchar | boolean | character ) ]
type = "integer" | "character" | "boolean" | "string"
arraydecl = type "[" number "]"
idtype = type | arraydecl
stmtlist = {stmt}
stmt = simplstmt | structstmt
simplstmt = assignstmt | iostmt
assignstmt = identifier "=" expression
expression = expression "+" term | expression "-" term | expression "%" term |term
term = term "*" factor | term "/" factor | factor | integer
factor = "(" expression ")" | identifier | indexedIdentifier
indexedIdentifier = indentifier "[" number "]"
iostmt = ( "read" | "print" ) identifier
structstmt = ifstmt | whilestmt | forstmt
ifstmt = "if" condition "then" stmtlist ["elif" condition "then"] ["else then" stmtlist] "stop if"
whilestmt = "while" condition "do" stmtlist "stop while"
forstmt = "for" ( identifier | indexedIdentifier ) "from" expression "to" expression "then" stmtlist "stop for"
condition = expression relation expression
relation = "<" | "<=" | "==" | "!=" | ">=" | ">"
